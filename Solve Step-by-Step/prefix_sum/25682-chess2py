import sys


N, M, K = map(int, sys.stdin.readline().split())
chess = []
for i in range(N):
    row = sys.stdin.readline().strip()
    chess.append(row)

#이상적인 체스판(블랙/화이트 만들기)
expected_black =[[None] * M for _ in range(N)]
expected_white =[[None] * M for _ in range(N)]

for i in range(N):
    for j in range(M):
        if (i+j) % 2 == 0:
            expected_black[i][j] = "B"
            expected_white[i][j] = "W"
        else:
            expected_black[i][j] = "W"
            expected_white[i][j] = "B"

#이상적인 체스판과 chess 비교 
diff_black = [[None] * M for _ in range(N)]
diff_white = [[None] * M for _ in range(N)]

for i in range(N):
    for j in range(M):
        if chess[i][j] == expected_black[i][j]:
            diff_black[i][j] = 0
        else:
            diff_black[i][j] = 1

        if chess[i][j] == expected_white[i][j]:
            diff_white[i][j] = 0
        else:
            diff_white[i][j] = 1

#diff_블랙,화이트 누적합 구하기 (2차원 누적합)
diff_black_sum = [[0] * (M+1) for _ in range(N+1)]
diff_white_sum = [[0] * (M+1) for _ in range(N+1)]

for i in range(1,N+1):
    for j in range(1,M+1):
        diff_black_sum[i][j] = diff_black_sum[i-1][j] + diff_black_sum[i][j-1] - diff_black_sum[i-1][j-1] + diff_black[i-1][j-1]
        diff_white_sum[i][j] = diff_white_sum[i-1][j] + diff_white_sum[i][j-1] - diff_white_sum[i-1][j-1] + diff_white[i-1][j-1]

min_value = float('Inf')
#슬라이싱 윈도우 (K*K)
for i in range(1,N-K+2):
    for j in range(1,M-K+2):
        tmp_black = diff_black_sum[i+K-1][j+K-1]-diff_black_sum[i-1][j+K-1] - diff_black_sum[i+K-1][j-1] +diff_black_sum[i-1][j-1]
        tmp_white = diff_white_sum[i+K-1][j+K-1]-diff_white_sum[i-1][j+K-1] - diff_white_sum[i+K-1][j-1] +diff_white_sum[i-1][j-1]
        min_value = min(min_value,tmp_black,tmp_white)


print(min_value)


# for row in diff_black_sum:
#     print(*row)